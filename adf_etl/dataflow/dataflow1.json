{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "staging_patient",
						"type": "DatasetReference"
					},
					"name": "stagingPatient"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "identifyDuplicatedRecords"
				},
				{
					"name": "removeDuplicateRecords",
					"description": "Filter rows that were marked with a rowcount greather than 1 in the previous activity"
				},
				{
					"name": "checkValues"
				},
				{
					"name": "formatValues"
				}
			],
			"scriptLines": [
				"source(output(",
				"          patientId as integer,",
				"          name as string,",
				"          age as string,",
				"          gender as string,",
				"          bloodType as string,",
				"          dateCreated as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: false) ~> stagingPatient",
				"checkValues@validRecords window(over(name,",
				"          age,",
				"          gender,",
				"          bloodType),",
				"     asc(name, false),",
				"     asc(gender, false),",
				"     asc(age, false),",
				"     asc(bloodType, false),",
				"     rowNum = rowNumber()) ~> identifyDuplicatedRecords",
				"identifyDuplicatedRecords filter(rowNum == 1) ~> removeDuplicateRecords",
				"formatValues split(isInteger(age) && contains(['B-','A+','A-','O+','AB+','AB-','B+','O-'], bloodType) && contains(['M','F'], gender),",
				"     disjoint: false) ~> checkValues@(validRecords, invalidRecords)",
				"stagingPatient derive(gender = iif(gender == 'Male', 'M', iif(gender == 'Female', 'F', '')),",
				"          name = initCap(name)) ~> formatValues"
			]
		}
	}
}