{
	"name": "patientLandingToStaging",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "landingData",
						"type": "DatasetReference"
					},
					"name": "patientLandingData"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "staging_patient",
						"type": "DatasetReference"
					},
					"name": "stagingPatient"
				}
			],
			"transformations": [
				{
					"name": "identifyDuplicatedRecords"
				},
				{
					"name": "removeDuplicateRecords",
					"description": "Filter rows that were marked with a rowcount greather than 1 in the previous activity"
				},
				{
					"name": "checkValues"
				},
				{
					"name": "formatValues"
				},
				{
					"name": "changeAgeDataType"
				}
			],
			"scriptLines": [
				"source(output(",
				"          name as string,",
				"          age as string,",
				"          gender as string,",
				"          bloodType as string,",
				"          medicalCondition as string,",
				"          dateOfAdmission as string,",
				"          doctor as string,",
				"          hospital as string,",
				"          insuranceProvider as string,",
				"          billingAmount as string,",
				"          roomNumber as string,",
				"          admissionType as string,",
				"          dischargeDate as string,",
				"          medication as string,",
				"          testResults as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT\\n    name, gender, age, bloodType\\nFROM [landing].[admissions]',",
				"     format: 'query',",
				"     staged: false) ~> patientLandingData",
				"checkValues@validRecords window(over(name,",
				"          age,",
				"          gender,",
				"          bloodType),",
				"     asc(name, false),",
				"     asc(gender, false),",
				"     asc(age, false),",
				"     asc(bloodType, false),",
				"     rowNum = rowNumber()) ~> identifyDuplicatedRecords",
				"identifyDuplicatedRecords filter(rowNum == 1) ~> removeDuplicateRecords",
				"formatValues split(isInteger(age) && toInteger(age) > 0 && contains(['B-','A+','A-','O+','AB+','AB-','B+','O-'], bloodType) && contains(['M','F'], gender),",
				"     disjoint: false) ~> checkValues@(validRecords, invalidRecords)",
				"patientLandingData derive(gender = iif(gender == 'Male', 'M', iif(gender == 'Female', 'F', '')),",
				"          name = initCap(left(trim(name),100))) ~> formatValues",
				"removeDuplicateRecords cast(output(",
				"          age as integer",
				"     ),",
				"     errors: true) ~> changeAgeDataType",
				"changeAgeDataType sink(allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     input(",
				"          name as string,",
				"          age as integer,",
				"          gender as string,",
				"          bloodType as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     staged: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> stagingPatient"
			]
		}
	}
}