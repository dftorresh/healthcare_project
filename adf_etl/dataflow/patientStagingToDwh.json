{
	"name": "patientStagingToDwh",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "staging_patient",
						"type": "DatasetReference"
					},
					"name": "stagingPatient"
				},
				{
					"dataset": {
						"referenceName": "dwhDimPatient",
						"type": "DatasetReference"
					},
					"name": "patientDwh"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "staging_patient",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "checkIfAdmissionAlreadyExists",
					"description": "Check if the admission (patient/date) already exists in the dwh. If so, skip it."
				},
				{
					"name": "AddPatientSk"
				}
			],
			"scriptLines": [
				"source(output(",
				"          name as string,",
				"          age as integer,",
				"          gender as string,",
				"          bloodType as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: true) ~> stagingPatient",
				"source(output(",
				"          patientId as integer,",
				"          name as string,",
				"          age as integer,",
				"          gender as string,",
				"          bloodType as string,",
				"          dateCreated as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: true) ~> patientDwh",
				"stagingPatient, patientDwh exists(stagingPatient@name == patientDwh@name",
				"     && stagingPatient@age == patientDwh@age",
				"     && stagingPatient@gender == patientDwh@gender",
				"     && stagingPatient@bloodType == patientDwh@bloodType,",
				"     negate:true,",
				"     broadcast: 'auto')~> checkIfAdmissionAlreadyExists",
				"checkIfAdmissionAlreadyExists keyGenerate(output(patientSk as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> AddPatientSk",
				"AddPatientSk sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          name as string,",
				"          age as integer,",
				"          gender as string,",
				"          bloodType as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     staged: true,",
				"     allowCopyCommand: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
			]
		}
	}
}